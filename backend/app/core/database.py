"""
Configura√ß√£o da base de dados SQLAlchemy para GestOnGo
Sistema modular com suporte para vers√£o base e m√≥dulos pagos
"""

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
import os

# URL da base de dados (SQLite para desenvolvimento)
SQLALCHEMY_DATABASE_URL = os.getenv("DATABASE_URL", "sqlite:///./gestongo.db")

# Configurar engine SQLite com check_same_thread=False para FastAPI
engine = create_engine(
    SQLALCHEMY_DATABASE_URL,
    connect_args={"check_same_thread": False} if "sqlite" in SQLALCHEMY_DATABASE_URL else {}
)

# Criar SessionLocal para liga√ß√µes √† base de dados
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# Base declarativa para todos os modelos ORM
Base = declarative_base()

def get_db():
    """
    Depend√™ncia para obter uma sess√£o da base de dados
    Usado nas rotas FastAPI com Depends(get_db)
    """
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

def criar_tabelas():
    """
    Criar todas as tabelas na base de dados
    Chamado no arranque da aplica√ß√£o
    """
    # Importar todos os modelos para garantir que est√£o registados
    from app.models_base import user, cliente
    
    # M√≥dulos opcionais (podem ser comentados para desativar)
    try:
        from modules.verde.models import servico_jardim
        print("‚úÖ M√≥dulo Verde (Jardinagem) carregado")
    except ImportError:
        print("‚ÑπÔ∏è M√≥dulo Verde n√£o dispon√≠vel")
    
    try:
        from modules.aqua.models import servico_piscina
        print("‚úÖ M√≥dulo Aqua (Piscinas) carregado")
    except ImportError:
        print("‚ÑπÔ∏è M√≥dulo Aqua n√£o dispon√≠vel")
    
    # Criar todas as tabelas
    Base.metadata.create_all(bind=engine)
    print("üìä Base de dados inicializada com sucesso")
