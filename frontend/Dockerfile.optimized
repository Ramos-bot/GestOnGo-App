# üèóÔ∏è **Multi-stage build para otimiza√ß√£o de cache**
FROM node:20-alpine AS dependencies
WORKDIR /app

# Copiar apenas package files para aproveitar cache do Docker
COPY frontend/package*.json ./
RUN npm ci --production --legacy-peer-deps && npm cache clean --force

# üõ†Ô∏è **Stage de build**
FROM node:20-alpine AS builder
WORKDIR /app

# Copiar dependencies do stage anterior
COPY --from=dependencies /app/node_modules ./node_modules
COPY frontend/package*.json ./

# Instalar dev dependencies
RUN npm ci --legacy-peer-deps

# Copiar source code e buildar
COPY frontend/src ./src
COPY frontend/public ./public
RUN npm run build

# üöÄ **Stage de produ√ß√£o - Nginx otimizado**
FROM nginx:1.25-alpine AS production

# Instalar curl para health checks
RUN apk add --no-cache curl

# Remover configura√ß√£o padr√£o do Nginx
RUN rm /etc/nginx/conf.d/default.conf

# Copiar configura√ß√£o customizada do Nginx
COPY --from=builder /app/build /usr/share/nginx/html

# Configura√ß√£o Nginx otimizada
RUN echo 'server { \
    listen 80; \
    server_name localhost; \
    \
    # Gzip compression \
    gzip on; \
    gzip_vary on; \
    gzip_min_length 1024; \
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json; \
    \
    # Cache static assets \
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ { \
        expires 1y; \
        add_header Cache-Control "public, immutable"; \
    } \
    \
    # Security headers \
    add_header X-Frame-Options "SAMEORIGIN" always; \
    add_header X-XSS-Protection "1; mode=block" always; \
    add_header X-Content-Type-Options "nosniff" always; \
    add_header Referrer-Policy "no-referrer-when-downgrade" always; \
    add_header Content-Security-Policy "default-src '\''self'\'' http: https: data: blob: '\''unsafe-inline'\''" always; \
    \
    # Serve React app \
    location / { \
        root /usr/share/nginx/html; \
        index index.html index.htm; \
        try_files $uri $uri/ /index.html; \
    } \
    \
    # API Proxy \
    location /api/ { \
        proxy_pass http://backend:3001; \
        proxy_http_version 1.1; \
        proxy_set_header Upgrade $http_upgrade; \
        proxy_set_header Connection '\''upgrade'\''; \
        proxy_set_header Host $host; \
        proxy_set_header X-Real-IP $remote_addr; \
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; \
        proxy_set_header X-Forwarded-Proto $scheme; \
        proxy_cache_bypass $http_upgrade; \
    } \
    \
    # Health check endpoint \
    location /health { \
        access_log off; \
        return 200 "healthy\\n"; \
        add_header Content-Type text/plain; \
    } \
}' > /etc/nginx/conf.d/default.conf

# Non-root user para seguran√ßa
RUN addgroup -g 1001 -S nodejs && adduser -S nextjs -u 1001
USER 1001

EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

CMD ["nginx", "-g", "daemon off;"]
