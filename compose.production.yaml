# üöÄ **PRODUCTION DEPLOYMENT CONFIG**

services:
  # üåê **Reverse Proxy + Load Balancer**
  nginx:
    image: nginx:1.25-alpine
    container_name: gestongo-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - gestongo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ‚öõÔ∏è **Frontend React (Optimized)**
  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY:-gestongo}-frontend:${GITHUB_SHA:-latest}
    container_name: gestongo-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=/api
      - REACT_APP_VERSION=${GITHUB_SHA:-latest}
    networks:
      - gestongo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # üöÄ **Backend Express (Scalable)**
  backend:
    image: ghcr.io/${GITHUB_REPOSITORY:-gestongo}-backend:${GITHUB_SHA:-latest}
    container_name: gestongo-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=${DATABASE_URL}
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - backend_logs:/app/logs
    depends_on:
      - database
      - redis
    networks:
      - gestongo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # üóÑÔ∏è **Database PostgreSQL**
  database:
    image: postgres:15-alpine
    container_name: gestongo-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-gestongo}
      - POSTGRES_USER=${POSTGRES_USER:-gestongo}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - postgres_logs:/var/log/postgresql
    networks:
      - gestongo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-gestongo} -d ${POSTGRES_DB:-gestongo}"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # üóÑÔ∏è **Cache Redis**
  redis:
    image: redis:7-alpine
    container_name: gestongo-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - gestongo-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # üìä **Monitoring - Prometheus**
  prometheus:
    image: prom/prometheus:latest
    container_name: gestongo-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - gestongo-network
    profiles:
      - monitoring

  # üìä **Monitoring - Grafana**
  grafana:
    image: grafana/grafana:latest
    container_name: gestongo-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    ports:
      - "3000:3000"
    networks:
      - gestongo-network
    profiles:
      - monitoring

  # üìà **Log Aggregation - Loki**
  loki:
    image: grafana/loki:latest
    container_name: gestongo-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/tmp/loki
    networks:
      - gestongo-network
    profiles:
      - monitoring

  # üìã **Log Collection - Promtail**
  promtail:
    image: grafana/promtail:latest
    container_name: gestongo-promtail
    restart: unless-stopped
    command: -config.file=/etc/promtail/config.yml
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - /var/log:/var/log:ro
      - backend_logs:/app/logs:ro
      - nginx_logs:/var/log/nginx:ro
    networks:
      - gestongo-network
    profiles:
      - monitoring

# üîó **Networks**
networks:
  gestongo-network:
    driver: bridge
    name: gestongo-network

# üíæ **Persistent Volumes**
volumes:
  postgres_data:
    name: gestongo-postgres-data
  redis_data:
    name: gestongo-redis-data
  backend_logs:
    name: gestongo-backend-logs
  nginx_logs:
    name: gestongo-nginx-logs
  postgres_logs:
    name: gestongo-postgres-logs
  prometheus_data:
    name: gestongo-prometheus-data
  grafana_data:
    name: gestongo-grafana-data
  loki_data:
    name: gestongo-loki-data
